/ch1
第一个参数是输入图像。
第二和第三 个分别是 minVal 和 maxVal。
第三个参数 置用来计算图像梯度的 Sobel卷积核的大小  默认值为 3。
最后一个参数是 L2gradient 它可以用来 设定 求梯度大小的方程。
如果 为 True 就会使用我们上 提到 的方程 否则 使用方程 Edge−Gradient (G) = |G2x| + |G2y| 代替，  默认值为 False。

函数内部过程：
1.噪声去除（5*5高斯核）  
2.计算图像梯度（水平和竖直方向梯度 然后有两种计算方式一种是求平方和的跟 一种是做比求反正切输出角度） 
3.非极大值抑制 （获得一个窄边界的二值图像）
4.滞后阈值   （minVal和maxVal）
[当图像的灰度梯度 于 maxVal 时  为是真的边界
那些低于 minVal 的 界会 抛弃。
如果介于两者之间的  就 看这个点是否与某个被确定为真正的边界点相连
如果是就认为它也是边界点 如果不是 就抛弃。]


参数说明：
edges = cv2.Canny(img,100,200)
100，200 对应minVal和maxVal
最后一个参数是 L2gradient 它可以用来 设定 求梯度大小的方程。
如果 为 True 就会使用我们上 提到 的方程 否则 使用方程 Edge−Gradient (G) = |G2x| + |G2y| 代替，  默认值为 False。

/ch2
创建创建一组图像 ， 这些图像是具有不同分辨率的原始图像。
我们把这组图像叫做图像金字塔
 
高斯金字塔的顶部是通过将底部图像中的连续的行和列去除得到的。
图像中的每个像素值等于下一层图像中 5 个像素的 斯加权平均值。
这样 操作一次一个 MxN 的图像就变成了一个 M/2xN/2 的图像。
所以 这幅图像 的面积就变为原来图像面积的四分之一。 这称为 Octave。
连续进行这样 的操作我们就会得到一个分辨率不断下降的图像金字塔。
我们可以使用函数 cv2.pyrDown() 和 cv2.pyrUp() 构建图像金字塔。

# 函数 cv2.pyrDown() 从一个 分辨率大尺寸的图像向上构建一个金子塔
# 尺寸变小 分辨率降低 。
lower_reso = cv2.pyrDown(higher_reso)
cv2.pyrDown会使分辨率降低！

# 从一个低分率小尺寸的图像向下构建一个金子塔尺寸变大 但分辨率不会增加
higher_reso2 = cv2.pyrUp(lower_reso)


拉普拉斯金字塔 用途图像压缩 很多像素都是0 类似与边界图
可以由做差运算得  L= Gi - Pyrup（Gi+1）

