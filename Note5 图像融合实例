import cv2
import numpy as np

A = cv2.imread('apple.jpg')
# 注意：为了使后面可以逐渐减半，这里的尺寸必须为2的次幂
A = cv2.resize(A, (256, 256), interpolation=cv2.INTER_CUBIC)
B = cv2.imread('orange.jpg')
B = cv2.resize(B, (256, 256), interpolation=cv2.INTER_CUBIC)
# 生成高斯金字塔
G = A.copy()
gpA = [G]
for i in range(5):
    G = cv2.pyrDown(G)
    gpA.append(G)

G = B.copy()
gpB = [G]
for i in range(5):
    G = cv2.pyrDown(G)
    gpB.append(G)

# 产生Laplacian金字塔
lpA = [gpA[5]]
for i in range(5, 0, -1):
    GE = cv2.pyrUp(gpA[i])
    print(GE.shape)
    print(gpA[i-1].shape)
    L = cv2.subtract(gpA[i - 1], GE)
    lpA.append(L)

lpB = [gpB[5]]
for i in range(5, 0, -1):
    GE = cv2.pyrUp(gpB[i])
    L = cv2.subtract(gpB[i - 1], GE)
    lpB.append(L)

# 合并
LS = []
for la, lb in zip(lpA, lpB):
    rows, cols, dpt = la.shape
    print(la.shape)
    ls = np.vstack((la[0:rows//2,:], lb[rows//2:,:]))
    LS.append(ls)
    
    ######################################################################################################
    #这里采用np.vstack()或np.hstack（）对应图像得上下融合和左右融合
    #np.hstack:按水平方向（列顺序）堆叠数组构成一个新的数组
    #np.vstack:按垂直方向（行顺序）堆叠数组构成一个新的数组
    arr1=np.array([1,2,3])
    arr2=np.array([4,5,6])
    print np.hstack((arr1,arr2))
    print np.vstack((arr1,arr2))
    [1 2 3 4 5 6]
    [[1 2 3]
    [4 5 6]]
    ######################################################################################################
    

# 重新构建图像
ls_ = LS[0]
for i in range(1, 6):
    ls_ = cv2.pyrUp(ls_)
    ls_ = cv2.add(ls_, LS[i])

# 连接
real = np.hstack((A[:, :cols // 2], B[:, cols // 2:]))

cv2.imshow("LS", ls_)
cv2.imshow("Real", real)

cv2.waitKey()
cv2.destroyAllWindows()
